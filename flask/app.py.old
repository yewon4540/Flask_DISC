from flask import Flask, render_template, request, redirect, url_for, flash
import os
import pandas as pd
from analysis import analyze_responses
import json

app = Flask(__name__)
app.secret_key = 'your_secret_key'

def load_questions():
    with open('questions.json', 'r', encoding='utf-8') as f:
        questions = json.load(f)
    return questions

@app.route('/')
def index():
    return render_template('index.html')

# @app.route('/survey', methods=['GET', 'POST'])
# def survey():
#     questions = load_questions()

#     if request.method == 'POST':
#         responses = []
#         print("POST request received")  # POST 요청을 받았는지 확인
#         for i in range(1, len(questions["questions"]) + 1):
#             answer = request.form.get(f'question_{i}')
#             if not answer:
#                 flash(f'{i}번째 문항 미체크!', 'error')
#                 return render_template('survey.html', questions=questions["questions"])
#             responses.append(answer)
        
#         # 응답 데이터를 DataFrame으로 변환
#         df = pd.DataFrame({
#             'Question': [q["question"] for q in questions["questions"]],
#             'Selected Value': responses
#         })
        
#         # DataFrame을 csv 파일로 저장
#         df.to_csv('static/data/survey_responses.csv', index=False)
        
#         # 응답을 분석하는 함수 호출
#         analyze_responses(responses)
#         print("Responses analyzed:", responses)  # 응답이 제대로 분석되었는지 확인
        
#         # 결과 페이지로 리디렉션
#         return render_template('result.html', questions=questions["questions"])

#     return render_template('survey.html', questions=questions["questions"])


# @app.route('/result', methods=['GET', 'POST'])
# def result():
#     # Load the analysis image and results
#     analysis_image = os.path.join('static', 'images', 'analysis_graph.png')
#     # analysis_text = "DISC 분석 결과"
#     # analysis_table = [["D", 5], ["I", 7], ["S", 4], ["C", 6]]
#     # DataFrame을 읽어서 설문 응답 데이터 로드
#     df = pd.read_csv('static/data/survey_responses.csv')

#     # 점수 계산 (D, I, S, C 값의 빈도수)
#     scores = df['Selected Value'].value_counts().to_dict()

#     return render_template('result.html', analysis_image=analysis_image, scores=scores, dataframe=df)
#     # return render_template('result.html', analysis_image=analysis_image, analysis_text=analysis_text, analysis_table=analysis_table)


# if __name__ == '__main__':
#     app.run(debug=True, host='0.0.0.0', port=80)

@app.route('/survey', methods=['GET', 'POST'])
def survey():
    questions = load_questions()

    if request.method == 'POST':
        responses = []
        print("POST request received")  # POST 요청이 발생하는지 확인
        for i in range(1, len(questions["questions"]) + 1):
            answer = request.form.get(f'question_{i}')
            if not answer:
                flash(f'{i}번째 문항 미체크!', 'error')
                return render_template('survey.html', questions=questions["questions"])
            responses.append(answer)
        
        # 응답 데이터를 DataFrame으로 변환
        df = pd.DataFrame({
            'Question': [q["question"] for q in questions["questions"]],
            'Selected Value': responses
        })
        
        # 'static/data' 디렉토리 생성 (존재하지 않으면)
        os.makedirs('static/data', exist_ok=True)

        # DataFrame을 csv 파일로 저장
        df.to_csv('static/data/survey_responses.csv', index=False)
        
        # 응답을 분석하는 함수 호출
        analyze_responses(responses)
        print("Responses analyzed:", responses)  # 응답이 제대로 분석되었는지 확인
        
        # 결과 페이지로 리디렉션
        return redirect(url_for('result'))

    return render_template('survey.html', questions=questions["questions"])

@app.route('/result', methods=['GET'])
def result():
    # Load the analysis image and results
    analysis_image = os.path.join('static', 'images', 'analysis_graph.png')
    
    # DataFrame을 읽어서 설문 응답 데이터 로드
    df = pd.read_csv('static/data/survey_responses.csv')

    # 점수 계산 (D, I, S, C 값의 빈도수)
    scores = df['Selected Value'].value_counts().to_dict()

    return render_template('result.html', analysis_image=analysis_image, scores=scores, dataframe=df)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=80)